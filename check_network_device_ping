#!/usr/bin/perl

#########################################################################

#
# Copyright (c) 2016 Marko Dinic <marko@yu.net>. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#########################################################################

our ($PROGRAM, $VERSION, $USAGE);
our (%CONFIG, %DEFAULTS);

#########################################################################
##      O P T I O N A L   S T A T I C   C O N F I G U R A T I O N      ##
#########################################################################

%CONFIG = ();

#########################################################################
##                          D E F A U L T S                            ##
#########################################################################

%DEFAULTS = (
    'size'	=> 100,
    'packets'	=> 5,
    'timeout'	=> 2
);

#########################################################################
##                         I N T E R N A L S                           ##
#########################################################################

use strict;
use warnings;

#########################################################################

use Getopt::Std;
use Net::Telnet;

#########################################################################

use constant {
    RC_OK	=> 0,
    RC_WARNING	=> 1,
    RC_CRITICAL	=> 2,
    RC_UNKNOWN	=> 3
};

use constant {
    CLI_PROMPT	=> '.*?[>#]\s*$',
    PAGE_MARKER	=> '\-+\s*More\s*\-+'
};

#########################################################################

$VERSION = "0.1";

($PROGRAM) = ($0 =~ /([^\/]+)$/);

#########################################################################
##                    H E L P E R   F U N C T I O N S                  ##
#########################################################################

sub HELP_MESSAGE
{
    print STDERR <<EOF
$PROGRAM [options]

 -D <remote_address>          Network device that will do the pinging
 -T <type>                    Type of pinging device (os/vendor):

                               ios
                               iosxr
                               force10
                               powerconnect
                               junos

                              Default: autodetect

 -U <username>                Pinging device's username
 -P <password>                Pinging device's password
 -E <secret>                  Elevated privilege level secret (ie. Cisco enable)

 -H <target_address>          Target (pinged) device's address
 -S <source>                  Ping packets' source address or interface
 -V <VRF>                     VRF to use instead of global routing table

 -p <packets>                 Number of pings to send
 -s <size>                    Ping packets' size
 -t <timeout>                 Ping reply timeout

 -4|6                         Use IPv4 or IPv6 explicitly

 -w <wrta>,<wpl>%             Warning threshold for average RTT and packet loss
 -c <crta>,<cpl>%             Critical threshold for average RTT and packet loss

 -d                           Enable debugging

EOF
}

sub error(;$)
{
    my $message = shift;

    # If exit message was specified - print it
    if(defined($message) && $message ne '') {
	print STDERR $message."\n\n";
    }

    # Display help
    HELP_MESSAGE();

    return RC_UNKNOWN;
}

#########################################################################
##            N E T W O R K   D E V I C E   S U P P O R T              ##
#########################################################################

sub detect_device_type($)
{
    my $conn = shift;

    # Request system version. Most platforms support this command
    $conn->put("show version\n");
    # Collect output up to command prompt or pagination marker
    my ($version, $prompt) = $conn->waitfor('/(?:'.PAGE_MARKER.'|'.CLI_PROMPT.')/i');
    # If output is paginated ...
    if(defined($prompt) && $prompt =~ /@{[PAGE_MARKER]}/i) {
	# ... end pagination
	$conn->put("q");
	$conn->waitfor('/'.CLI_PROMPT.'/');
    }

    # If version info is available, attempt platform detection
    if(defined($version) && $version ne '') {
	return 'ios' if $version =~ /Cisco IOS Software/i;
	return 'iosxr' if $version =~ /Cisco IOS XR Software/i;
	return 'force10' if $version =~ /Force10/i;
	return 'powerconnect' if $version =~ /PowerConnect/i;
	return 'junos' if $version =~ /JUNOS/i;
    }

    return '';
}

#########################################################################
##                              M A I N                                ##
#########################################################################

sub main()
{
    my %opts = ();

    # Parse command line arguments
    $Getopt::Std::STANDARD_HELP_VERSION = 1;
    getopts("D:T:U:P:E:H:S:V:p:s:t:w:c:d46", \%opts);

    my %params = (%DEFAULTS, %CONFIG);
    my ($device, $type);
    my ($user, $pass);
    my ($warn_rta, $warn_pl);
    my ($crit_rta, $crit_pl);
    my $debug;

    # Statically configured ping parameters
    # can be overrriden by runtime options
    while(my ($opt, $val) = each %opts) {
	# Process available options
	if($opt eq 'D') {
	    return error "Missing/invalid pinging device hostname/address" unless $val ne '';
	    # Set pinging device address
	    $device = $val;
	} elsif($opt eq 'T') {
	    return error "Missing/invalid pinging device type (os/vendor)" unless $val ne '';
	    # Set pinging device type
	    $type = $val;
	} elsif($opt eq 'U') {
	    return error "Missing/invalid pinging device username" unless $val ne '';
	    # Set pinging device's telnet username
	    $user = $val;
	} elsif($opt eq 'P') {
	    return error "Missing/invalid pinging device password" unless $val ne '';
	    # Set pinging device's telnet password
	    $pass = $val;
	} elsif($opt eq 'E') {
	    return error "Missing/invalid pinging device enable password" unless $val ne '';
	    # Set pinging device's enable password
	    $params{'enable'} = $val;
	} elsif($opt eq 'H') {
	    return error "Missing ping target hostname/address" unless $val ne '';
	    # Set ping target address
	    $params{'target'} = $val;
	} elsif($opt eq 'S') {
	    return error "Missing ping source address/interface" unless $val ne '';
	    # Set ping source address
	    $params{'source'} = $val;
	} elsif($opt eq 'V') {
	    return error "Missing/invalid VRF" unless $val ne '';
	    # Set pinging source VRF
	    $params{'vrf'} = $val;
	} elsif($opt eq 'p') {
	    return error "Missing/invalid packet count" unless($val =~ /^\d+$/ && $val > 0);
	     # Set the number of packets to ping with
	    $params{'packets'} = $val;
	} elsif($opt eq 's') {
	    return error "Missing/invalid packet size" unless($val =~ /^\d+$/ && $val > 35);
	    # Set the ping packet size
	    $params{'size'} = $val;
	} elsif($opt eq 't') {
	    return error "Missing/invalid ping timeout" unless($val =~ /^\d+$/ && $val > 0);
	    # Set the ping timeout
	    $params{'timeout'} = $val;
	} elsif($opt eq 'w') {
	    return error "Missing warning thresholds" unless $val ne '';
	    # Extract average RTT and packed loss thresholds
	    ($warn_rta, $warn_pl) = ($val =~ /^(\d+),(\d+)\%$/);
	    unless(defined($warn_rta) && $warn_rta ne '' &&
		   defined($warn_pl) && $warn_pl ne '') {
		return error "Invalid warning thresholds ".$val;
	    }
	} elsif($opt eq 'c') {
	    return error "Missing critical thresholds" unless $val ne '';
	    # Extract average RTT and packed loss thresholds
	    ($crit_rta, $crit_pl) = ($val =~ /^(\d+),(\d+)\%$/);
	    unless(defined($crit_rta) && $crit_rta ne '' &&
		   defined($crit_pl) && $crit_pl ne '') {
		return error "Invalid critical thresholds ".$val;
	    }
	} elsif($opt eq '4') {
	    $params{'af'} = 4;
	} elsif($opt eq '6') {
	    $params{'af'} = 6;
	} elsif($opt eq 'd') {
	    # Enable debugging
	    $params{'debug'} = $debug = 1;
	} else {
	    return error;
	}
    }

    # Check for mandatory parameters: device, target and thresholds
    return error unless(defined($params{'target'}) && $params{'target'} ne '' &&
			defined($device) && $device ne '' &&
			defined($warn_rta) && $warn_rta =~ /^\d+$/ && $warn_rta >= 0 &&
			defined($warn_pl) && $warn_pl  =~ /^\d+$/ && $warn_pl >= 0 &&
			defined($crit_rta) && $crit_rta =~ /^\d+$/ && $crit_rta >= 0 &&
			defined($crit_pl) && $crit_pl =~ /^\d+$/ && $crit_pl >= 0);

    # Create new telnet session
    my $conn = Net::Telnet->new(Prompt => '/'.CLI_PROMPT.'/',
				Errmode => 'return',
				Timeout => 10);

    return RC_UNKNOWN unless defined($conn);

    # Telnet to remote network device
    $conn->open($device)
	or return RC_UNKNOWN;

    print "Connected to remote network device ".$device."\n" if $debug;

    # Send username, if defined
    if(defined($user) && $user ne '') {
	print "Sending username\n" if $debug;
	unless($conn->waitfor('/(?:[Uu]ser(?:name)?|[Ll]ogin):/')) {
	    print "Username failed\n" if $debug;
	    return RC_UNKNOWN;
	}
	$conn->put($user."\n");
    }

    # Send password, if defined
    if(defined($pass) && $pass ne '') {
	print "Sending password\n" if $debug;
	unless($conn->waitfor('/[Pp]ass(?:word)?:/')) {
	    print "Password failed\n" if $debug;
	    return RC_UNKNOWN;
	}
	$conn->cmd($pass);
    }

    print "Authenticated to remote network device ".$device."\n" if $debug;

    # If device type wasn't specified ...
    unless(defined($type) && $type ne '') {
	# ... attempt to detect it
	$type = detect_device_type($conn);
	if(defined($type) && $type ne '') {
	    print "Detected network device type ".$type."\n" if $debug;
	}
    }

    my $stats;

    # Determine device-specific ping function
    my $ping = __PACKAGE__->can('__'.$type.'_ping');

    # If device type is supported, platform-specific
    # ping function exists and we have coderef to it
    if(defined($ping) && ref($ping) eq 'CODE') {
	# Set telnet cmd (send command, wait for prompt) timeout
	$conn->timeout($params{'timeout'} * ($params{'packets'} + 1));
	# Ping the target
	$stats = $ping->($conn, %params);
    # If we got no coderef to the ping function ...
    } else {
	# ... device type is not supported
	print "Unsupported device type ".$type."\n" if $debug;
    }

    # End CLI session
    $conn->put("exit");
    # Close telnet session
    $conn->close;

    return RC_UNKNOWN unless defined($stats);

    if($debug) {
	use Data::Dumper;
	print Dumper($stats);
    }

    # Calculate packet loss percentage
    my $packet_loss = int(100 * (1 - ($stats->{'received'} / $stats->{'sent'})));

    # Check if packet loss exceeds
    # user-specified critical level
    if($packet_loss >= $crit_pl) {
	print "PING CRITICAL - Packet loss = ".$packet_loss."%\n";
	return RC_CRITICAL;
    }

    # Check if RTT average exceeds
    # user-specified critical level
    if($stats->{'rttavg'} >= $crit_rta) {
	print "PING CRITICAL - Packet loss = ".$packet_loss."%, RTA = ".$stats->{'rttavg'}." ms\n";
	return RC_CRITICAL;
    }

    # Check if packet loss exceeds
    # user-specified warning level
    if($packet_loss >= $warn_pl) {
	print "PING WARNING - Packet loss = ".$packet_loss."%\n";
	return RC_WARNING;
    }

    # Check if RTT average exceeds
    # user-specified warning level
    if($stats->{'rttavg'} >= $warn_rta) {
	print "PING WARNING - Packet loss = ".$packet_loss."%, RTA = ".$stats->{'rttavg'}." ms\n";
	return RC_WARNING;
    }

    print "PING OK - Packet loss = ".$packet_loss."%, RTA = ".$stats->{'rttavg'}." ms\n";
    return RC_OK;
}

#########################################################################
##                  C I S C O   I O S   D E V I C E                    ##
#########################################################################

sub __ios_ping($;%)
{
    my $conn = shift;

    # Get ping parameters
    my ($enable, $target, $af, $source, $packets, $size, $timeout, $vrf, $debug) =
	@{{@_}}{('enable', 'target', 'af', 'source', 'packets', 'size', 'timeout', 'vrf', 'debug')};

    return undef unless(defined($target) && $target ne '');

    # Change to enable mode, if defined
    if(defined($enable) && $enable ne '') {
	print "Sending enable password\n" if $debug;
	unless($conn->cmd(String => "enable\n".$enable, Timeout => 10)) {
	    print "Enable failed\n" if $debug;
	    return undef;
	}
    }

    # Format ping command
    my $cmd = "ping";
    # Add VRF parameter if defined
    if(defined($vrf) && $vrf ne '') {
	$cmd .= " vrf ".$vrf;
    }
    # Add address family if defined
    if(defined($af) && $af ne '') {
	my $family = {4 => 'ip', 6 => 'ipv6'}->{$af};
	if(defined($family) && $family ne '') {
	    $cmd .= " ".$family;
	}
    }
    # Add ping target
    $cmd .= " ".$target;
    # Ping with packet parameters requires enable mode
    if(defined($enable) && $enable ne '') {
	# Optional ping source address/interface
	if(defined($source) && $source ne '') {
	    $cmd .= " source ".$source;
	}
	# Optional packet count parameter
	if(defined($packets) && $packets ne '') {
	    $cmd .= " repeat ".$packets;
	}
	# Optional size parameter
	if(defined($size) && $size ne '') {
	    $cmd .= " size ".$size;
	}
	# Optional ping timeout parameter
	if(defined($timeout) && $timeout ne '') {
	    $cmd .= " timeout ".$timeout;
	}
    }

    # Display debugging if requested
    print "Executing ".$cmd."\n" if $debug;

    # Issue ping command and get the command's output
    my @output = $conn->cmd($cmd);

    # The last line of output contains the ping summary
    my $summary = pop @output;
    return undef unless defined($summary);

    chomp $summary;
    return undef unless $summary ne '';

    print $summary."\n" if $debug;

    my %result;

    # Extract summary information
    @result{('received', 'sent', 'rttmin', 'rttavg', 'rttmax')} = ($summary =~ /^Success rate is \d+ percent \((\d+)\/(\d+)\)(?:, round\-trip min\/avg\/max = (\d+)\/(\d+)\/(\d+) ms)?$/i);

    return \%result;
}

#########################################################################
##              C I S C O   I O S   X R   D E V I C E                  ##
#########################################################################

sub __iosxr_ping($;%)
{
    my $conn = shift;

    # Get ping parameters
    my ($target, $af, $source, $packets, $size, $timeout, $vrf, $debug) =
	@{{@_}}{('target', 'af', 'source', 'packets', 'size', 'timeout', 'vrf', 'debug')};

    return undef unless(defined($target) && $target ne '');

    # Format ping command
    my $cmd = "ping";
    # Add VRF parameter, if defined
    if(defined($vrf) && $vrf ne '') {
	$cmd .= " vrf ".$vrf;
    # Otherwise, add address family, if defined
    } elsif(defined($af) && $af ne '') {
	my $family = {4 => 'ipv4', 6 => 'ipv6'}->{$af};
	if(defined($family) && $family ne '') {
	    $cmd .= " ".$family;
	}
    }
    # Add ping target
    $cmd .= " ".$target;
    # Optional ping source address/interface
    if(defined($source) && $source ne '') {
	$cmd .= " source ".$source;
    }
    # Optional packet count parameter
    if(defined($packets) && $packets ne '') {
	$cmd .= " count ".$packets;
    }
    # Optional size parameter
    if(defined($size) && $size ne '') {
	$cmd .= " size ".$size;
    }
    # Optional ping timeout parameter
    if(defined($timeout) && $timeout ne '') {
	$cmd .= " timeout ".$timeout;
    }

    # Display debugging if requested
    print "Executing ".$cmd."\n" if $debug;

    # Issue ping command and get the command's output
    my @output = $conn->cmd($cmd);

    # The last line of output contains the ping summary
    my $summary = pop @output;
    return undef unless defined($summary);

    chomp $summary;
    return undef unless $summary ne '';

    print $summary."\n" if $debug;

    my %result;

    # Extract summary information
    @result{('received', 'sent', 'rttmin', 'rttavg', 'rttmax')} = ($summary =~ /^Success rate is \d+ percent \((\d+)\/(\d+)\)(?:, round\-trip min\/avg\/max = (\d+)\/(\d+)\/(\d+) ms)?$/i);

    return \%result;
}

#########################################################################
##                    F O R C E 1 0   D E V I C E                      ##
#########################################################################

sub __force10_ping($;%)
{
    my $conn = shift;

    # Get ping parameters
    my ($target, $source, $packets, $size, $timeout, $debug) =
	@{{@_}}{('target', 'source', 'packets', 'size', 'timeout', 'debug')};

    return undef unless(defined($target) && $target ne '');

    # Format ping command
    my $cmd = "ping ".$target;
    # Optional ping source address/interface
    if(defined($source) && $source ne '') {
	$cmd .= " source ".$source;
    }
    # Optional packet count parameter
    if(defined($packets) && $packets ne '') {
	$cmd .= " count ".$packets;
    }
    # Optional size parameter
    if(defined($size) && $size ne '') {
	$cmd .= " datagram-size ".$size;
    }
    # Optional ping timeout parameter
    if(defined($timeout) && $timeout ne '') {
	$cmd .= " timeout ".$timeout;
    }

    # Display debugging if requested
    print "Executing ".$cmd."\n" if $debug;

    # Issue ping command and get the command's output
    my @output = $conn->cmd($cmd);

    # The last line of output contains the ping summary
    my $summary = pop @output;
    return undef unless defined($summary);

    chomp $summary;
    return undef unless $summary ne '';

    print $summary."\n" if $debug;

    my %result;

    # Extract summary information
    @result{('received', 'sent', 'rttmin', 'rttavg', 'rttmax')} = ($summary =~ /^Success rate is \d+(?:\.\d+)? percent \((\d+)\/(\d+)\)(?:, round\-trip min\/avg\/max = (\d+)\/(\d+)\/(\d+) \(ms\))?$/i);

    return \%result;
}

#########################################################################
##          D E L L   P O W E R C O N N E C T   D E V I C E            ##
#########################################################################

sub __powerconnect_ping(%)
{
    my $conn = shift;

    # Get ping parameters
    my ($target, $af, $packets, $size, $timeout, $debug) =
	@{{@_}}{('target', 'af', 'packets', 'size', 'timeout', 'debug')};

    return undef unless(defined($target) && $target ne '');

    # Format ping command
    my $cmd = "ping";
    # Add address family, if defined
    if(defined($af) && $af ne '') {
	my $family = {4 => 'ip', 6 => 'ipv6'}->{$af};
	if(defined($family) && $family ne '') {
	    $cmd .= " ".$family;
	}
    }
    # Add ping target
    $cmd .= " ".$target;
    # Optional packet count parameter
    if(defined($packets) && $packets ne '') {
	$cmd .= " repeat ".$packets;
    # Optional size parameter
    } elsif(defined($size) && $size ne '') {
	$cmd .= " size ".$size;
    # Optional ping timeout parameter
    } elsif(defined($timeout) && $timeout ne '') {
	$cmd .= " timeout ".$timeout;
    }

    # Display debugging if requested
    print "Executing ".$cmd."\n" if $debug;

    # Issue ping command and get the command's output
    my @output = $conn->cmd($cmd);

    my %result;

    pop @output;

    # RTT statistics
    my $rtt_summary = pop @output;
    return undef unless defined($rtt_summary);

    chomp $rtt_summary;
    return undef unless $rtt_summary ne '';

    print $rtt_summary."\n" if $debug;

    # Extract summary information
    @result{('rttmin', 'rttavg', 'rttmax')} = ($rtt_summary =~ /^round\-trip \(msec\) min\/avg\/max = (\d+)\/(\d+)\/(\d+)$/i);

    # Packet loss statistics
    my $pl_summary = pop @output;
    return undef unless defined($pl_summary);

    chomp $pl_summary;
    return undef unless $pl_summary ne '';

    print $pl_summary."\n" if $debug;

    # Extract summary information
    @result{('sent','received')} = ($pl_summary =~ /^(\d+) packets transmitted, (\d+) packets received, \d+(\.\d+)?% packet loss$/i);

    return \%result;
}

#########################################################################
##                      J U N O S   D E V I C E                        ##
#########################################################################

sub __junos_ping(%)
{
    my $conn = shift;

    # Get ping parameters
    my ($target, $af, $source, $packets, $size, $timeout, $vrf, $debug) =
	@{{@_}}{('target', 'af', 'source', 'packets', 'size', 'timeout', 'vrf', 'debug')};

    return undef unless(defined($target) && $target ne '');

    # We must explicitly set screen width to maximum.
    # Otherwise, commands we issue will be truncated
    $conn->cmd("set cli screen-width 1024");

    # Format ping command
    my $cmd = "ping ".$target." rapid";
    # Add VRF parameter, if defined
    if(defined($vrf) && $vrf ne '') {
	$cmd .= " routing-instance ".$vrf;
    }
    # Add address family, if defined
    if(defined($af) && $af ne '') {
	my $family = {4 => 'inet', 6 => 'inet6'}->{$af};
	if(defined($family) && $family ne '') {
	    $cmd .= " ".$family;
	}
    }
    # Optional ping source address/interface
    if(defined($source) && $source ne '') {
	$cmd .= " source ".$source;
    }
    # Optional packet count parameter
    if(defined($packets) && $packets ne '') {
	$cmd .= " count ".$packets;
    }
    # Optional size parameter
    if(defined($size) && $size ne '') {
	$cmd .= " size ".$size;
    }
    # Optional ping timeout parameter
    if(defined($timeout) && $timeout ne '') {
	$cmd .= " interval ".$timeout;
    }

    # Display debugging if requested
    print "Executing ".$cmd."\n" if $debug;

    # Issue ping command and get the command's output
    my @output = $conn->cmd($cmd);

    my %result;

    pop @output;
    pop @output;

    # RTT statistics
    my $rtt_summary = pop @output;
    return undef unless defined($rtt_summary);

    chomp $rtt_summary;
    return undef unless $rtt_summary ne '';

    print $rtt_summary."\n" if $debug;

    # Extract summary information
    @result{('rttmin', 'rttavg', 'rttmax')} = ($rtt_summary =~ /^round-trip min\/avg\/max\/std\-?dev = (\d+(?:\.\d+)?)\/(\d+(?:\.\d+)?)\/(\d+(?:\.\d+)?)\/\d+(?:\.\d+)? ms$/i);

    # Packet loss statistics
    my $pl_summary = pop @output;
    return undef unless defined($pl_summary);

    chomp $pl_summary;
    return undef unless $pl_summary ne '';

    print $pl_summary."\n" if $debug;

    # Extract summary information
    @result{('sent','received')} = ($pl_summary =~ /^(\d+) packets transmitted, (\d+) packets received, \d+(\.\d+)?% packet loss$/i);

    return \%result;
}

#########################################################################
##                     E N T R Y   P O I N T                           ##
#########################################################################

exit(main());

__END__
